var query = require('querystring');
var request = require('superagent');
var session = require('express-session');

function ApiClient(options) {
    var authServer = options.authServer;
    var clientId = options.clientId;
    var clientSecret = options.clientSecret;
    var scope = options.scope;
    var redirectUri = options.redirectUri;
    var debugLog = options.debugLog || function () {};
    var refreshBuffer = options.refreshBuffer || 1; // seconds

    var getBasicAuth = function () {
        return 'Basic ' + new Buffer(clientId + ":" + clientSecret, 'ascii').toString('base64');
    };

    var createBasicAuth = function() {
        return 'Basic ' + new Buffer(clientId + ':' + clientSecret, 'ascii').toString('base64');
    };

    var getAccessTokenFromCode = function (code) {
        return request
            .post(authServer + '/oauth/token')
            .set('Authorization', getBasicAuth())
            .send({
                grant_type: 'authorization_code',
                code: code,
                redirectUri: redirectUri
            });
    };

    var getAccessTokenFromRefreshToken = function (refresh_token) {
        return request
            .post(authServer + '/oauth/token')
            .set('Authorization', getBasicAuth())
            .send({
                grant_type: 'refresh_token',
                refresh_token: refresh_token,
                scope: scope
            });
    };

    var destroySession = function (session) {
        delete session.access_token;
        delete session.refresh_token;
        delete session.ttl;
    };

    return {
        authorize: function (req, res) {
            var authUrl = authServer + '/oauth/authorize?' + query.stringify({
                redirect_uri: redirectUri,
                client_id: clientId,
                response_type: 'code',
                scope: scope
            });
            debugLog("Redirecting to authorize with sb1id. Url: ", authUrl);
            res.redirect(authUrl);
        },
        authorizeCallback: function (req, res, next) {
            if (req.query.error) {
                debugLog('Authorize callback with error.');
                return next(new Error(req.query.error_description));
            }

            var code = req.query.code;

            debugLog('Requesting access_token from sb1id with code: ', code);
            getAccessTokenFromCode(code).end(function (err, response) {
                if (err) {
                    debugLog('Error in get access_token request', err);
                    return next(new Error(err));
                }
                if (!response.ok) {
                    debugLog('Non success status code for access_token request. ', response.statusCode);
                    return next(new Error(response.body));
                }
                debugLog(response.body);
                req.session.access_token = response.body.access_token;
                req.session.refresh_token = response.body.refresh_token;
                req.session.ttl = timestampSecondsNow() + response.body.expires_in;

                debugLog('Successfully obtained a access_token:', req.session.access_token);
                next();
            });
        },
        secured: function (req, res, next) {
            if (req.session && req.session.access_token) {
                // auth OK
                if (req.session.ttl - timestampSecondsNow() > refreshBuffer) {
                    return next();
                }

                // Should use refresh_token
                debugLog("access_token ttl low or expired. Using refresh_token: ", req.session.refresh_token);
                debugLog("TTL left: ", req.session.ttl - timestampSecondsNow());
                getAccessTokenFromRefreshToken(req.session.refresh_token).end(function (err, result) {
                    if (err) {
                        debugLog('Error in get refresh_token request: ', err.message);
                        destroySession(req.session);
                        return next(new Error(err));
                    }
                    if (!result.ok) {
                        debugLog('Non success status code for refresh_token request. ', result.statusCode);
                        destroySession(req.session);
                        return next(new Error(result.body));
                    }

                    req.session.access_token = result.body.access_token;
                    req.session.ttl = timestampSecondsNow() + result.body.expires_in;

                    debugLog('Successfully obtained new access_token with refresh_token:', req.session.access_token);
                    next();
                })
            }
            else {
                debugLog('user has no session, redirecting to auth.');
                // Sign in
                res.redirect('/auth');
            }
        },
        verifyAccess: function (req, res, next) {
            debugLog('Invoking bearer token parser middleware');
            var token;

            // Look for token in header
            if (req.headers.authorization) {
                var pieces = req.headers.authorization.split(' ', 2);
                // Check auth header
                if (!pieces || pieces.length !== 2)
                    return Error('Wrong authorization header');
                // Only bearer auth is supported
                if (pieces[0].toLowerCase() != 'bearer')
                    return Error('Unsupported authorization method header');
                token = pieces[1];
                debugLog('Bearer token parsed from authorization header: ', token);
            }
            // Look for token in query string
            else if (req.query && req.query['access_token']) {
                token = req.query['access_token'];
                debugLog('Bearer token parsed from query params: ', token);
            }
            // Look for token in post body
            else if (req.body && req.body['access_token']) {
                token = req.body['access_token'];
                debugLog('Bearer token parsed from body params: ', token);
            }
            // Not found
            else
                return Error('Bearer token not found');

            debugLog('Introspecting access token');

            request
                .post(authServer + '/oauth/introspect')
                .set('Authorization', createBasicAuth())
                .send({
                    token: token,
                    token_type_hint: 'access_token'
                })
                .end(function (err, result) {
                    if (err) {
                        return Error('The access token is not valid!');
                    }

                    req.accessToken = result.body;

                    next();
                });
        }
    }
}

module.exports = ApiClient;

function timestampSecondsNow() {
    return Math.floor(Date.now()/1000);
}
